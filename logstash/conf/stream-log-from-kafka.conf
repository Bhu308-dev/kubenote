input {
    kafka {
        bootstrap_servers => "{{ kafka_node_name }}"
        codec => "json"
        consumer_threads => 1
        session_timeout_ms => "300000"
        retry_backoff_ms => "1000"
        topics => ["FE-SCS-LOG"]
        auto_offset_reset => "earliest"
        type => "stream-log"
        decorate_events => true
        id => "fe-scs-log-in"
    }
}
filter {
    if ([msgHeaders][timestamp]) {
        date {
            match => [ "[msgHeaders][timestamp]", "UNIX" ]
        }
    }
    if ([traceId]) {
        mutate { add_field => {"[api][trace]" => "%{[traceId]}"} }
    }
    if ([spanId]) {
        mutate { add_field => {"[api][span]" => "%{[spanId]}"} }
    }
    if ([msgHeaders][correlationid]) {
        mutate { add_field => {"[api][correlationid]" => "%{[msgHeaders][correlationid]}"} }
    }
    if ([msgHeaders][userid]) {
        mutate { add_field => {"[api][userid]" => "%{[msgHeaders][userid]}"} }
    }
    if ([method]) {
        if ([source]) {
            mutate { add_field => {"[api][source]" => "%{[source]}"} }
        } else if ([kafkaReceivedTopic]) {
            mutate { add_field => {"[api][source]" => "%{[kafkaReceivedTopic]}"} }
        }
        mutate { add_field => {"[api][command]" => "%{[method]} %{[channel]}"} }
    } else if ([kafkaReceivedTopic]) {
        mutate {
        add_field => {
            "[api][source]" => "%{[kafkaReceivedTopic]}"
            "[api][command]" => "%{[kafkaReceivedTopic]}"
        }
    }
    }
    mutate { add_field => {"[api][method]" => "STREAM"} }
    if ([msgBody]) {
        mutate {
        add_field => {"[reqBody]" => "%{[msgBody]}"}
        remove_field => "msgBody"
    }
    }
    ruby {
        code => "event.set('[@metadata][localtime]', event.get('@timestamp').time.localtime('+07:00').strftime('%Y.%m.%d'))"
    }
}
output {
    if "_grokparsefailure" in [tags] {
        file {
            path => "{{ logstash_path_final }}/grok-failure-%{[@metadata][localtime]}.log"
            codec => rubydebug
            id => "fe-scs-log-err"
        }
    } else {
        elasticsearch {
        hosts => {{ request_log_index }}
        user => "{{ conf_d_es_user }}"
        password => "{{ conf_d_es_password }}"
        timeout => 60
        ssl => true
        cacert => '{{ logstash_cert_path }}/trusted-cert/{{ rootca }}'
        manage_template => false
        index => "fe-request-log-ms-current-stream-%{[@metadata][localtime]}"
        document_type => "http"
        id => "fe-scs-log-out"
        }
    }
}