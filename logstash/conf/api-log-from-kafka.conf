input {
    kafka {
        bootstrap_servers => "{{ kafka_node_name }}"
        codec => "json"
        consumer_threads => 16
        #session_timeout_ms => "4000"
        session_timeout_ms => "300000"
        #fetch_max_wait_ms => "4000"
        #request_timeout_ms => "5000"
        retry_backoff_ms => "1000"
        topics => ["FE-REQUEST-LOG"]
        auto_offset_reset => "earliest"
        type => "request-log"
        decorate_events => true
        id => "fe-request-log-in"
    }
}
filter {
    if [service] == "zuul-server" {
        drop {}
    }
    grok {
        match => {
            "tranTime" => [
                "(?m)^java.util.Date,%{SPACE}%{USERNAME:tranTime}",
                "(?m)^%{GREEDYDATA:tranTime}"
            ]
        }
        break_on_match => false
        overwrite => ["tranTime"]
    }
    date {
        match => ["tranTime", "yyyy-MM-dd'T'HH:mm:ss.SSSZ"]
    }
    ruby {
        code => "event.set('[@metadata][localtime]', event.get('@timestamp').time.localtime('+07:00').strftime('%Y.%m.%d'))"
    }
    if ([traceId]) {
        mutate {add_field => {"[api][trace]" => "%{[traceId]}"}}
    }
    if ([spanId]) {
        mutate {add_field => {"[api][span]" => "%{[spanId]}"}}
    }
    if ([reqHeaders][correlationid]) {
        mutate {add_field => {"[api][correlationid]" => "%{[reqHeaders][correlationid]}"}}
    }
    if ([uri]) {
        mutate {add_field => {"[api][uri]" => "%{[uri]}"}}
    }
    if ([respStatus]) {
        mutate {add_field => {"[api][response][status]" => "%{[respStatus]}"}}
    }
    if ([reqHeaders][api-auth]) {
        mutate {add_field => {"[api][oauth][access]" => "%{[reqHeaders][api-auth]}"}}
    }
    if ([reqHeaders][api-scope]) {
        mutate {add_field => {"[api][oauth][scope]" => "%{[reqHeaders][api-scope]}"}}
    }
    if ([reqHeaders][source]) {
        mutate {add_field => {"[api][source]" => "%{[reqHeaders][source]}"}}
    }
    if ([reqMethod]) {
        mutate {add_field => {"[api][method]" => "%{[reqMethod]}"}}
        if ([rawUri] and [service] != "zuul-server") {
            mutate {add_field => {"[api][command]" => "%{[reqMethod]} %{[rawUri]}"}}
        }else {
            mutate {add_field => {"[api][command]" => "%{[reqMethod]} %{[uri]}"}}
        }
    }
    if ([reqHeaders][userid]) {
        mutate {
            add_field => {
                "[api][userid]" => "%{[reqHeaders][userid]}"
            }
        }
    } else if ([respHeaders][userid]) {
        mutate {
            add_field => {
                "[api][userid]" => "%{[respHeaders][userid]}"
            }
        }
    }
    if ([reqHeaders][deviceid]) {
        mutate {
            add_field => {
                "[deviceid]" => "%{[reqHeaders][deviceid]}"
            }
        }
    }
    # if([clientIp]) {
    #     mutate {
    #         split => {"[clientIp]" => ","}
    #     }
    #     geoip {
    #         source => "[clientIp][0]"
    #         target => "geoip"
    #     }
    # }
    if([reqHeaders][user-agent]) {
        grok {
            match => {
                "[reqHeaders][user-agent]" => [
                "(?m)^%{USERNAME:[client][os][name]}/%{USERNAME:[client][os][version]};%{USERNAME:[client][app][name]}/%{USERNAME:[client][app][version]}/%{USERNAME:[client][app][build]}",
                "(?m)^%{USERNAME:[client][os][name]}/%{USERNAME:[client][os][version]} \(%{USERNAME:[client][app][name]} %{USERNAME:[client][app][version]}\)",
                "(?m)^%{USERNAME:[client][app][name]}/%{USERNAME:[client][app][version]} \(%{USERNAME:[client][os][name]}/%{USERNAME:[client][os][version]}\)",
                "(?m)^%{GREEDYDATA}"
                ]
            }
        }
        mutate { add_field => {"[client][user-agent]" => "%{[reqHeaders][user-agent]}"} }
    }
}
output {
    if "_grokparsefailure" in [tags] {
        file {
            path => "{{ logstash_path_final }}/grok-failure-%{[@metadata][localtime]}.log"
            codec => rubydebug
            id => "fe-request-log-err"
        }
    } else {
        elasticsearch {
            hosts => {{ request_log_index }}
            user => "{{ conf_d_es_user }}"
            password => "{{ conf_d_es_password }}"
            timeout => 60
            ssl => true
            cacert => '{{ logstash_cert_path }}/trusted-cert/{{ rootca }}'
            manage_template => false
            index => "fe-request-log-ms-current-%{[@metadata][localtime]}"
            document_type => "http"
            id => "fe-request-log-out"
        }
    }
    #stdout { codec => rubydebug }
}