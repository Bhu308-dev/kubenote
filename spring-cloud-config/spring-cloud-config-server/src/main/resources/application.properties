### Git Backend
# TODO Fill up the details
spring.cloud.config.server.git.uri=https://github.com/vxavictor513/kubenote.git
spring.cloud.config.server.git.username=
spring.cloud.config.server.git.password=
spring.cloud.config.server.git.search-paths=spring-cloud-config/spring-cloud-config-git-backend
spring.cloud.config.server.git.default-label=master
spring.cloud.config.server.git.force-pull=true
# TODO `spring.cloud.config.server.git.basedir` is not tested with relative path
#spring.cloud.config.server.git.basedir=tmp

### Spring Cloud Bus using `config-bus` binder
spring.cloud.bus.enabled=true
# TODO `spring.cloud.bus.topic` is the Kafka topic for Spring Cloud Bus communication. Use the same in Spring Cloud Bus client.
spring.cloud.bus.topic=${spring.application.name}
spring.cloud.stream.binders.config-bus.type=kafka
## Input
spring.cloud.stream.bindings.springCloudBusInput.binder=config-bus
spring.cloud.stream.bindings.springCloudBusInput.destination=${spring.cloud.bus.topic}
spring.cloud.stream.kafka.bindings.springCloudBusInput.consumer.configuration.client.id=${spring.application.name}
## Output
spring.cloud.stream.bindings.springCloudBusOutput.binder=config-bus
spring.cloud.stream.bindings.springCloudBusOutput.destination=${spring.cloud.bus.topic}
spring.cloud.stream.kafka.bindings.springCloudBusOutput.producer.configuration.client.id=${spring.application.name}

### REST Request Logging using `rest-logging` binder
spring.cloud.stream.binders.rest-logging.type=kafka
spring.cloud.stream.bindings.restLoggingOutput.binder=rest-logging
# TODO: Specify your Kafka topic as `destination`
spring.cloud.stream.bindings.restLoggingOutput.destination=config-log
spring.cloud.stream.bindings.restLoggingOutput.content-type=application/json;charset=UTF-8
spring.cloud.stream.bindings.restLoggingOutput.producer.headerMode=raw
spring.cloud.stream.kafka.bindings.restLoggingOutput.producer.configuration.client.id=${spring.application.name}

### SSL
server.ssl.enabled=true
server.ssl.protocol=TLS
server.ssl.enabled-protocols=TLSv1.2

### Kubernetes Discovery
spring.cloud.kubernetes.discovery.catalog-services-watch.enabled=true
spring.cloud.kubernetes.discovery.catalog-services-watch.delay=5000